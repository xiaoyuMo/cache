<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
   http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context classpath:/org/springframework/context/config/spring-context-3.0.xsd
   http://www.springframework.org/schema/aop classpath:/org/springframework/aop/config/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx classpath:/org/springframework/transaction/config/spring-tx-3.0.xsd">
  
  <!-- 引入redis配置 -->
  <import resource="classpath*:redis.xml"/>
  
  <context:annotation-config />
  <context:component-scan base-package="com.xiaoyu" />  <!-- 自动扫描所有注解该路径 -->
  <bean id="autoLoadConfig" class="com.xiaoyu.cache.to.AutoLoadConfig">
    <property name="threadCnt" value="10" />
    <property name="maxElement" value="20000" />
    <property name="printSlowLog" value="true" />
    <property name="slowLoadTime" value="500" />
    <property name="sortType" value="1" />
    <property name="checkFromCacheBeforeLoad" value="true" />
    <property name="autoLoadPeriod" value="50" />
    <property name="functions">
      <map>
        <entry key="isEmpty" value="com.xiaoyu.cache.CacheUtil" />
      </map>
    </property>
  </bean>
  <bean id="fastjsonSerializer" class="com.xiaoyu.cache.serializer.FastjsonSerializer" />
  
  <bean id="fastjsonCompressorSerializer" class="com.xiaoyu.cache.serializer.CompressorSerializer">
    <constructor-arg ref="fastjsonSerializer" />
    <constructor-arg value="1024" /><!-- 超过1024时进行压缩，方便测试所以设置比较小，实际项目中，需要设置大些 -->
  </bean>
  
  <bean id="scriptParser" class="com.xiaoyu.cache.script.SpringELParser" />
  
 <!-- 
  <bean id="cacheManager" class="com.xiaoyu.cache.map.CachePointCut" init-method="start" destroy-method="destroy">
    <constructor-arg ref="autoLoadConfig" />
    <constructor-arg ref="fastjsonSerializer" />
    <constructor-arg ref="scriptParser" />
    <property name="unpersistMaxSize" value="0" />
  </bean>
   -->
   
  <bean id="cacheManager" class="com.xiaoyu.cache.redis.ShardedCachePointCut" destroy-method="destroy">
    <constructor-arg ref="autoLoadConfig" />
    <constructor-arg ref="fastjsonSerializer" />
    <constructor-arg ref="scriptParser" />
    <property name="shardedJedisPool" ref="shardedJedisPool" />
    <property name="namespace" value="test" />
  </bean>
  
  <bean id="cacheInterceptor" class="com.xiaoyu.cache.aop.aspectj.AspectjAopInterceptor">
    <property name="cacheManager" ref="cacheManager" />
  </bean>
  
  <!-- proxy-target-class=false为jdk代理，为true的话，会导致拦截不了mybatis的mapper -->
  <aop:config proxy-target-class="false">
    <!-- 拦截mybatis的mapper -->
    <aop:aspect ref="cacheInterceptor">
      <aop:pointcut id="daoCachePointcut1" expression="execution(public !void com.xiaoyu.*.mapper..*.*(..))" />
      <aop:around pointcut-ref="daoCachePointcut1" method="checkAndProceed" />
    </aop:aspect>
    <aop:aspect ref="cacheInterceptor" order="1000"><!-- order 参数控制 aop通知的优先级，值越小，优先级越高 ，在事务提交后删除缓存 -->
      <aop:pointcut id="deleteCachePointcut1" expression="execution(* com.xiaoyu.*.mapper..*.*(..))" />
      <aop:after-returning pointcut-ref="deleteCachePointcut1" method="checkAndDeleteCache" returning="retVal" />
    </aop:aspect>
  </aop:config>
  
  <aop:config proxy-target-class="false">
    <!-- 拦截@Cache -->
    <aop:aspect ref="cacheInterceptor">
      <aop:pointcut id="daoCachePointcut" expression="execution(public !void com.xiaoyu.*.dao..*.*(..)) &amp;&amp; @annotation(cache)" />
      <aop:around pointcut-ref="daoCachePointcut" method="proceed" />
    </aop:aspect>
    <!-- 拦截@CacheDelete -->
    <aop:aspect ref="cacheInterceptor" order="1000"><!-- order 参数控制 aop通知的优先级，值越小，优先级越高 ，在事务提交后删除缓存 -->
      <aop:pointcut id="deleteCachePointcut" expression="execution(* com.xiaoyu.*.dao..*.*(..)) &amp;&amp; @annotation(cacheDelete)" />
      <aop:after-returning pointcut-ref="deleteCachePointcut" method="deleteCache" returning="retVal" />
    </aop:aspect>
  </aop:config>
</beans>